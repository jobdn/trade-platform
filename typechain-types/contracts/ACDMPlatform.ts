/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ACDMPlatformInterface extends utils.Interface {
  functions: {
    "ACDM_AMOUNT()": FunctionFragment;
    "_ACDMToken()": FunctionFragment;
    "_balances(address)": FunctionFragment;
    "_roundStatus()": FunctionFragment;
    "_roundTime()": FunctionFragment;
    "_tradeStock()": FunctionFragment;
    "buyACDM()": FunctionFragment;
    "register(address)": FunctionFragment;
    "startSaleRound()": FunctionFragment;
    "users(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACDM_AMOUNT"
      | "_ACDMToken"
      | "_balances"
      | "_roundStatus"
      | "_roundTime"
      | "_tradeStock"
      | "buyACDM"
      | "register"
      | "startSaleRound"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACDM_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_ACDMToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_roundStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_roundTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tradeStock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyACDM", values?: undefined): string;
  encodeFunctionData(functionFragment: "register", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startSaleRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "ACDM_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_ACDMToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_roundStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_roundTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_tradeStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyACDM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startSaleRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {};
}

export interface ACDMPlatform extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ACDMPlatformInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACDM_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    _ACDMToken(overrides?: CallOverrides): Promise<[string]>;

    _balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    _roundStatus(overrides?: CallOverrides): Promise<[number]>;

    _roundTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    _tradeStock(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyACDM(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    register(
      _referer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startSaleRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, boolean] & {
        amountOfACDM: BigNumber;
        referer: string;
        isReferer: boolean;
        isExists: boolean;
      }
    >;
  };

  ACDM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  _ACDMToken(overrides?: CallOverrides): Promise<string>;

  _balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  _roundStatus(overrides?: CallOverrides): Promise<number>;

  _roundTime(overrides?: CallOverrides): Promise<BigNumber>;

  _tradeStock(overrides?: CallOverrides): Promise<BigNumber>;

  buyACDM(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  register(
    _referer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startSaleRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, boolean, boolean] & {
      amountOfACDM: BigNumber;
      referer: string;
      isReferer: boolean;
      isExists: boolean;
    }
  >;

  callStatic: {
    ACDM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    _ACDMToken(overrides?: CallOverrides): Promise<string>;

    _balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _roundStatus(overrides?: CallOverrides): Promise<number>;

    _roundTime(overrides?: CallOverrides): Promise<BigNumber>;

    _tradeStock(overrides?: CallOverrides): Promise<BigNumber>;

    buyACDM(overrides?: CallOverrides): Promise<void>;

    register(_referer: string, overrides?: CallOverrides): Promise<void>;

    startSaleRound(overrides?: CallOverrides): Promise<void>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, boolean] & {
        amountOfACDM: BigNumber;
        referer: string;
        isReferer: boolean;
        isExists: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    ACDM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    _ACDMToken(overrides?: CallOverrides): Promise<BigNumber>;

    _balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _roundStatus(overrides?: CallOverrides): Promise<BigNumber>;

    _roundTime(overrides?: CallOverrides): Promise<BigNumber>;

    _tradeStock(overrides?: CallOverrides): Promise<BigNumber>;

    buyACDM(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    register(
      _referer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startSaleRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ACDM_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _ACDMToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _roundStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _roundTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _tradeStock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyACDM(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    register(
      _referer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startSaleRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
