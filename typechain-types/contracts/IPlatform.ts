/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IPlatformInterface extends utils.Interface {
  functions: {
    "addOrder(uint256,uint256)": FunctionFragment;
    "buyToken(uint256)": FunctionFragment;
    "redeemOrder(uint256,uint256)": FunctionFragment;
    "register(address)": FunctionFragment;
    "removeOrder(uint256)": FunctionFragment;
    "startSaleRound()": FunctionFragment;
    "startTradeRound()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOrder"
      | "buyToken"
      | "redeemOrder"
      | "register"
      | "removeOrder"
      | "startSaleRound"
      | "startTradeRound"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "register", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startSaleRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTradeRound",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startSaleRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTradeRound",
    data: BytesLike
  ): Result;

  events: {
    "OrderAdded(address,uint256,uint256)": EventFragment;
    "OrderClosed(address,uint256)": EventFragment;
    "OrderRedeemed(address,uint256,uint256)": EventFragment;
    "TokensSold(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensSold"): EventFragment;
}

export interface OrderAddedEventObject {
  seller: string;
  amount: BigNumber;
  price: BigNumber;
}
export type OrderAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OrderAddedEventObject
>;

export type OrderAddedEventFilter = TypedEventFilter<OrderAddedEvent>;

export interface OrderClosedEventObject {
  buyer: string;
  id: BigNumber;
}
export type OrderClosedEvent = TypedEvent<
  [string, BigNumber],
  OrderClosedEventObject
>;

export type OrderClosedEventFilter = TypedEventFilter<OrderClosedEvent>;

export interface OrderRedeemedEventObject {
  buyer: string;
  id: BigNumber;
  amount: BigNumber;
}
export type OrderRedeemedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OrderRedeemedEventObject
>;

export type OrderRedeemedEventFilter = TypedEventFilter<OrderRedeemedEvent>;

export interface TokensSoldEventObject {
  buyer: string;
  amount: BigNumber;
}
export type TokensSoldEvent = TypedEvent<
  [string, BigNumber],
  TokensSoldEventObject
>;

export type TokensSoldEventFilter = TypedEventFilter<TokensSoldEvent>;

export interface IPlatform extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPlatformInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOrder(
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyToken(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemOrder(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    register(
      _referer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOrder(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startSaleRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTradeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOrder(
    _amount: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyToken(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemOrder(
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  register(
    _referer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOrder(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startSaleRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTradeRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOrder(
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyToken(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    redeemOrder(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    register(_referer: string, overrides?: CallOverrides): Promise<void>;

    removeOrder(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    startSaleRound(overrides?: CallOverrides): Promise<void>;

    startTradeRound(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OrderAdded(address,uint256,uint256)"(
      seller?: string | null,
      amount?: BigNumberish | null,
      price?: null
    ): OrderAddedEventFilter;
    OrderAdded(
      seller?: string | null,
      amount?: BigNumberish | null,
      price?: null
    ): OrderAddedEventFilter;

    "OrderClosed(address,uint256)"(
      buyer?: string | null,
      id?: BigNumberish | null
    ): OrderClosedEventFilter;
    OrderClosed(
      buyer?: string | null,
      id?: BigNumberish | null
    ): OrderClosedEventFilter;

    "OrderRedeemed(address,uint256,uint256)"(
      buyer?: string | null,
      id?: BigNumberish | null,
      amount?: null
    ): OrderRedeemedEventFilter;
    OrderRedeemed(
      buyer?: string | null,
      id?: BigNumberish | null,
      amount?: null
    ): OrderRedeemedEventFilter;

    "TokensSold(address,uint256)"(
      buyer?: string | null,
      amount?: null
    ): TokensSoldEventFilter;
    TokensSold(buyer?: string | null, amount?: null): TokensSoldEventFilter;
  };

  estimateGas: {
    addOrder(
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyToken(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemOrder(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    register(
      _referer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOrder(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startSaleRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTradeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOrder(
      _amount: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyToken(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemOrder(
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    register(
      _referer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOrder(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startSaleRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTradeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
