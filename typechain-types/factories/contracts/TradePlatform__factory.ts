/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TradePlatform,
  TradePlatformInterface,
} from "../../contracts/TradePlatform";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_roundTime",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "INITIAL_TOKEN_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "_balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "buyACDM",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "endsAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_referer",
        type: "address",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "roundStatus",
    outputs: [
      {
        internalType: "enum TradePlatform.RoundStatus",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roundTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startSaleRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startTradeRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startsAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tradeStock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "users",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOfACDM",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "referer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isReferer",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isExists",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200212c3803806200212c833981810160405281019062000037919062000343565b6001600081905550620000737f65d31305f9ac519ab77f2e268b9c372da4b7998e849bd29d80dbfba219c56fe560001b6200029b60201b60201c565b620000a77f70db74bacce0818f75fe5f8feb1b3122c5dde3359f3fa2be330f8259029c198b60001b6200029b60201b60201c565b620000db7fef3b0c79a644f7924713b9c15981a42017f31341989cc9f2f9c30be61f2e87b260001b6200029b60201b60201c565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001507f0c7f8833cb427ffca6249d86398edc55ab95c88c6010950870826873695bbbbe60001b6200029b60201b60201c565b620001847fc11e1489129b4a092022b72740a9a1c11aae42a6d44ad4bd991f5bbb6b596ae860001b6200029b60201b60201c565b80600281905550620001bf7faa5c40faf3ba5e04b2f03039501e296eb545fae39a5cbd237062ffb33cec748460001b6200029b60201b60201c565b620001f37fdae259087fc6956bf38468185609207264bb8c0fcc3e64d6058402c23c81fd9260001b6200029b60201b60201c565b6001600960006101000a81548160ff021916908360018111156200021c576200021b6200038a565b5b0217905550620002557fa43dff99fc1592337cdabe2dfda4e846a839239a69540cd0041806d3f3dce01660001b6200029b60201b60201c565b620002897fadff2b0adf2dee5154fcc6c22bcf28e04283b3b8be803c2dab6ce47f76b5f2a560001b6200029b60201b60201c565b620186a06001819055505050620003b9565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002d082620002a3565b9050919050565b620002e281620002c3565b8114620002ee57600080fd5b50565b6000815190506200030281620002d7565b92915050565b6000819050919050565b6200031d8162000308565b81146200032957600080fd5b50565b6000815190506200033d8162000312565b92915050565b600080604083850312156200035d576200035c6200029e565b5b60006200036d85828601620002f1565b925050602062000380858286016200032c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b611d6380620003c96000396000f3fe6080604052600436106100e85760003560e01c8063735f7b561161008a578063af46868211610059578063af468682146102b6578063b59bfa03146102e1578063ee5f8c8f146102f8578063fc0c546a14610323576100e8565b8063735f7b56146101f55780637ff9b596146102205780639d63848a1461024b578063a87430ba14610276576100e8565b80632765a5de116100c65780632765a5de146101395780634420e486146101645780636c5a080a1461018d5780636ebcf607146101b8576100e8565b80630462fc8e146100ed5780630a09284a146101045780630b0e62f01461012f575b600080fd5b3480156100f957600080fd5b5061010261034e565b005b34801561011057600080fd5b506101196106f3565b604051610126919061166a565b60405180910390f35b6101376106f9565b005b34801561014557600080fd5b5061014e610996565b60405161015b919061166a565b60405180910390f35b34801561017057600080fd5b5061018b600480360381019061018691906116e8565b61099c565b005b34801561019957600080fd5b506101a2610f50565b6040516101af919061166a565b60405180910390f35b3480156101c457600080fd5b506101df60048036038101906101da91906116e8565b610f56565b6040516101ec919061166a565b60405180910390f35b34801561020157600080fd5b5061020a610f6e565b604051610217919061178c565b60405180910390f35b34801561022c57600080fd5b50610235610f81565b604051610242919061166a565b60405180910390f35b34801561025757600080fd5b50610260610f87565b60405161026d919061166a565b60405180910390f35b34801561028257600080fd5b5061029d600480360381019061029891906116e8565b610f8d565b6040516102ad94939291906117d1565b60405180910390f35b3480156102c257600080fd5b506102cb610ff7565b6040516102d8919061166a565b60405180910390f35b3480156102ed57600080fd5b506102f6610ffd565b005b34801561030457600080fd5b5061030d611622565b60405161031a919061166a565b60405180910390f35b34801561032f57600080fd5b50610338611628565b6040516103459190611816565b60405180910390f35b61037a7fa17c9a2334746fa9f6409dafc3d4fc632ac7f4ed9052fb67c76754648400899d60001b61164e565b6103a67f8fa4f3c75b170ade36da8cdc96698332fc42295c8ece6dde54423263757c49c960001b61164e565b6103d27fb201d5c6672144fbdfed2760f59ca703b4ae2cbbde1d7deab8aaa4f8b684e20e60001b61164e565b6103fe7fdc2a7a82f6823844e23611d3e359e463585e2478e3897fd5fda6e8cff8b5f22060001b61164e565b6000600181111561041257610411611715565b5b600960009054906101000a900460ff16600181111561043457610433611715565b5b14610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046b9061188e565b60405180910390fd5b6104a07f6b6cf97797f801d415d2169313630fffda165bae98ef1a9bfa37e217d2fd947460001b61164e565b6104cc7f7ae757fbbc30861fdf03cfca9588b5c8d6998795718d6959cca92c6ab17734a560001b61164e565b6104f87fe0500df8c69768bfcf33627d2b342de52bc989f73b17b1f2de33f78c76a7ddda60001b61164e565b6105247f4c25202e6850d3a291e457715642cb98f5660953f6248a766c3bc1b4a7f6dc9760001b61164e565b60065442118061053657506000600854145b610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c90611920565b60405180910390fd5b6105a17f810e193d29552dc3d0bfb23875a37fdd6e4c45fe2b9b4135dd1089dfa9c20e4e60001b61164e565b6105cd7ff3dc9bdc982572b8ac8435af86216ae80c4d80497f37f2fb62d10347720f55a060001b61164e565b6105f97f2092bc4cc1e360e43170862f58071c723dd53fdaa3cfa22161d119b352f921a260001b61164e565b4260058190555061062c7faff18c4625436cb80f6142f0c0ce4bd2874cf11f2b1d7f9d22a5f7e8f7b668cd60001b61164e565b6106587fc1f7d5eb15be15c5b2035c0a1f3f871ec8615ac4a1e71ea6c08ae6f454ebbfa460001b61164e565b600254600554610668919061196f565b60068190555061069a7f9b2cf72dc0f9489244d6f15270870b579342d8065afa5760a38fb0f5e2e23f4660001b61164e565b6106c67f9cf698fd64fb667ab70bc562d7ced1a59c33a4adbb0546478989ce2b6da4f93960001b61164e565b6001600960006101000a81548160ff021916908360018111156106ec576106eb611715565b5b0217905550565b60065481565b6002600054141561073f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073690611a11565b60405180910390fd5b60026000819055506107737fba5fafa32498ea8fc2e08a7aabb9417be9f6adc9762b0c6e73aa944d0ee1467960001b61164e565b61079f7f58ac1956e58179265c8629f6f2c912cc7f9e4dec1626910877b1e6dbaa06b7ed60001b61164e565b6107cb7f057fda370c748b28c1191ed399fdb84272c21407e88c552365cb57b64230721c60001b61164e565b6107f77f7006746ad75b7b7878f03d9112b5de6b3e05eb3b027872dc3bf7ea6d738ec54760001b61164e565b6000341161083a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083190611a7d565b60405180910390fd5b6108667fa857d49292b419b670c647f2f3bcf45795b04fe6035605edca065a5d7d11bda560001b61164e565b6108927f3ffd972e28b6107a6c072468c6ccd810214fb77b33009523299b93f9dbb64eae60001b61164e565b6108be7f9499e14be77f2d63e6585747a7dee0453fb87af8ec497f85105913c2c7d5af7560001b61164e565b6108ea7f68ad21a5eace187eb5a7a43d1ee9fa0f75af2d8df298aabe6bf8da3fc372dd3060001b61164e565b600060018111156108fe576108fd611715565b5b600960009054906101000a900460ff1660018111156109205761091f611715565b5b14610960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095790611ae9565b60405180910390fd5b61098c7ffc060f123a38a3a1b00d55fb8b261a9c69b1e8d316085aefff71cd897ba55c8f60001b61164e565b6001600081905550565b60015481565b6109c87f65c755a31eb18e87f8a991838e25009a892d816e314ab2174f26ffab56ca856060001b61164e565b6109f47f342eb303a781bbd0c3834596b4f2647f7aa34b3d32d5505f8d0b7e4cc00383f160001b61164e565b610a207f34ffd22e2b1fcdb188115ff387c20e5a1710351b5c06452950287d17e3e86fbb60001b61164e565b610a4c7ff1abac512e2edeae483c120af814d44b66bc5254b3bc7ce0c724b7cf386dba0460001b61164e565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160159054906101000a900460ff1615610adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad390611b55565b60405180910390fd5b610b087f1ac1aac3fec724c0e2f9564bbf6a72b92eef5dc5caa0df8c1d5f1d3ea427b18360001b61164e565b610b347f53f71c4a533bee21a871b721c1da41d20a5f1de7b188594dad4bcf21551b028f60001b61164e565b610b607f607f248a4d78622a92c15e16a38352eb7a0c2e6c3a7e90eb4e7cdd6ccd01fcce60001b61164e565b610b8c7fada6a031a50ea3f0d672826001487c726411629076bcdb01e9b2fb61a0b864c660001b61164e565b600b60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160159054906101000a900460ff16610c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1290611bc1565b60405180910390fd5b610c477fada428941689371e15d0b46f552be4df1d52cc19cdea1a0ec8319082c5c2270660001b61164e565b610c737fd1696e734e4b3bf8816e48f50a53051fecddbfaca211a99cc8573ac351b98c7860001b61164e565b610c9f7fa758fa040f72c6840de827b546827e2294bb09e6af3b242bd72bae7248c9c2d960001b61164e565b6040518060800160405280600081526020018273ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200160011515815250600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555060608201518160010160156101000a81548160ff021916908315150217905550905050610ddc7f1969e6aa4f1a02faee6a4845cbb5a03845464b201b5ecdcc4d01b95274fe730f60001b61164e565b610e087fd9ca81bd16c48d3bc64f32ab4af687adc7a976500ebbbc8c9afc1ef81e350e3a60001b61164e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f2057610e687fd5b5bb3a7bd26cfb93d922eddbfcff11ab205f50fb8af7a15e9725363aac6e5660001b61164e565b610e947fca6ebe391cc3aec5a6ead92271e316ac5700e04857635a678a976b4b341fc30560001b61164e565b610ec07f18a8197db78fb336d24d768d1b08fe9658468802594beb7150bd71cdce1f013d60001b61164e565b6001600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160146101000a81548160ff021916908315150217905550610f4d565b610f4c7fe91b1afebf14b62944e5c6cb80ce68a568e467b1b8ebe0929f832c911925916360001b61164e565b5b50565b60045481565b600a6020528060005260406000206000915090505481565b600960009054906101000a900460ff1681565b60075481565b60085481565b600b6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060010160159054906101000a900460ff16905084565b60055481565b6110297f22a9f7809b06361abf3bc3fee04b85f763d7a80203c09e919bece8e2155ef33960001b61164e565b6110557f265b8813588597945d87652b8802b7b95042178ccc88054779ed8953b4d5f2b760001b61164e565b6110817f218e36904144bfb91f2b67c7ca12c0201bbce5dcac519ceb7b92197194dccc7a60001b61164e565b6110ad7f9b5e6fd1216b9a6a4943e279b0439541e611a7be8df1a8f52878af1b634e2a8e60001b61164e565b6001808111156110c0576110bf611715565b5b600960009054906101000a900460ff1660018111156110e2576110e1611715565b5b14611122576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111990611c53565b60405180910390fd5b61114e7fb3aedb08d4926c0e0c7913ec23342a056008f9fb525bd2ead5596c88156348a960001b61164e565b61117a7f2cf790af2a112164888613dc851faddbb4927bc176b33791b46820c7f0d2760c60001b61164e565b6111a67f952fb662b9c98464c9e3df21f3242b7dc9fbf528d4ea5128a00cebf3c946ca0860001b61164e565b6111d27f5fb5d3b6154e4455618d70d537fd23c26445922387655bf8e3b362935f83590860001b61164e565b6006544211611216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120d90611920565b60405180910390fd5b6112427f7f0ab00d9c909a4bfd2cda83624d0f7b3ea12c7b1d3cdd167080dd8b324c883460001b61164e565b61126e7f7ae92c96d57732b0edf1e228cd33ce95e583386d1b49d3beb5315429b1da756460001b61164e565b61129a7faf4f5dfc52e337de0acdad36dbf0f640587534e34efe867a4410e893d005920c60001b61164e565b600060075414156113ab576112d17ff9f00d616868e5b9cbef0ec9c5817a4a063d62a62deb67388e575ed65c3b98e160001b61164e565b6112fd7f3bdcd0a24b4fe45774035160947f66c2a0140702895194e6106ab7c569e02a4560001b61164e565b6113297fce7cdc5012a8d91c70c0daa7e2881f552186caff414341661b28132c2bf6753c60001b61164e565b600154670de0b6b3a764000061133f9190611ca2565b6007819055506113717fc3c7e070350d01e50349cdf20412ad3c55466481cb9bd2cdaef0c1a13274729860001b61164e565b61139d7f8a2ab3f573c744b7fb3e4e60461247abf08cac9db5795323fe1db84312ed9af660001b61164e565b6001546008819055506114d0565b6113d77ff9578bf5d3ae69bdd7948988a577bb18dcd1102759a14d0ea516dcb91504987360001b61164e565b6114037f6166d82ec3a4173ecf7d811a0db88ed96ce2755b4d1952f9447939281e28379260001b61164e565b61142f7fd8afac84a8969ec9ee12d8b796092bea5eb9f981a970aa31a91437cbeca254e360001b61164e565b6503a352944000606460676007546114479190611cd3565b6114519190611ca2565b61145b919061196f565b60078190555061148d7f723a8c5b5b4b98679d78b7a813f7be782d4b7d6541632fefcc9138426425d1a260001b61164e565b6114b97fa3d11fab0bcfec65bd5ba31c0c5fe94f9414a53d8c706804fdafba0b78a0afba60001b61164e565b6007546004546114c99190611ca2565b6008819055505b6114fc7fdbdbcd1a9673a87cd1da4400082458856e0409f5472b12153260b516f6dd526960001b61164e565b6115287ff0bd9a89735209ca09388a3b76316438a70a9ebc69ddeba8dced73cfee0fdb3560001b61164e565b4260058190555061155b7f7c17be4ba5bd94aaeea0caeeccfe3244f451a677df9834fc248cd0c81fcf1e3e60001b61164e565b6115877fba4fe97e8b4792adb50c054b19e83913d229e3d6730e3059be9d9247eed3b89460001b61164e565b600254600554611597919061196f565b6006819055506115c97f875d18cf3a57605af39e199705b792dd26f741a99cd350dbe098a33587c141c860001b61164e565b6115f57fb7859e8a5481a6f670125544f0bb247f36b59410f1778c80f9fc8662aa64a20360001b61164e565b6000600960006101000a81548160ff0219169083600181111561161b5761161a611715565b5b0217905550565b60025481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b50565b6000819050919050565b61166481611651565b82525050565b600060208201905061167f600083018461165b565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116b58261168a565b9050919050565b6116c5816116aa565b81146116d057600080fd5b50565b6000813590506116e2816116bc565b92915050565b6000602082840312156116fe576116fd611685565b5b600061170c848285016116d3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061175557611754611715565b5b50565b600081905061176682611744565b919050565b600061177682611758565b9050919050565b6117868161176b565b82525050565b60006020820190506117a1600083018461177d565b92915050565b6117b0816116aa565b82525050565b60008115159050919050565b6117cb816117b6565b82525050565b60006080820190506117e6600083018761165b565b6117f360208301866117a7565b61180060408301856117c2565b61180d60608301846117c2565b95945050505050565b600060208201905061182b60008301846117a7565b92915050565b600082825260208201905092915050565b7f506c6174666f726d3a2073616c6520726f756e64206973206e6f74206f766572600082015250565b6000611878602083611831565b915061188382611842565b602082019050919050565b600060208201905081810360008301526118a78161186b565b9050919050565b7f506c6174666f726d3a2074696d65206f66206c61737420726f756e642069732060008201527f6e6f74206f766572000000000000000000000000000000000000000000000000602082015250565b600061190a602883611831565b9150611915826118ae565b604082019050919050565b60006020820190508181036000830152611939816118fd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061197a82611651565b915061198583611651565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119ba576119b9611940565b5b828201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006119fb601f83611831565b9150611a06826119c5565b602082019050919050565b60006020820190508181036000830152611a2a816119ee565b9050919050565b7f506c617466726f6d3a207a65726f206d73672e76616c75650000000000000000600082015250565b6000611a67601883611831565b9150611a7282611a31565b602082019050919050565b60006020820190508181036000830152611a9681611a5a565b9050919050565b7f506c6174666f726d3a206f6e6c792073616c6520726f756e6400000000000000600082015250565b6000611ad3601983611831565b9150611ade82611a9d565b602082019050919050565b60006020820190508181036000830152611b0281611ac6565b9050919050565b7f506c6166726f746d3a206578697374656e742075736572000000000000000000600082015250565b6000611b3f601783611831565b9150611b4a82611b09565b602082019050919050565b60006020820190508181036000830152611b6e81611b32565b9050919050565b7f506c6174666f726d3a206e6f74206578697374656e7420726566657265720000600082015250565b6000611bab601e83611831565b9150611bb682611b75565b602082019050919050565b60006020820190508181036000830152611bda81611b9e565b9050919050565b7f506c6174666f726d3a20747261646520726f756e64206973206e6f74206f766560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c3d602183611831565b9150611c4882611be1565b604082019050919050565b60006020820190508181036000830152611c6c81611c30565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611cad82611651565b9150611cb883611651565b925082611cc857611cc7611c73565b5b828204905092915050565b6000611cde82611651565b9150611ce983611651565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611d2257611d21611940565b5b82820290509291505056fea2646970667358221220b3b85363137f5ba6675bb5830f69c23833c721afa1c92c86ed9dcefcdb28927164736f6c634300080b0033";

type TradePlatformConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TradePlatformConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TradePlatform__factory extends ContractFactory {
  constructor(...args: TradePlatformConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: string,
    _roundTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TradePlatform> {
    return super.deploy(
      _token,
      _roundTime,
      overrides || {}
    ) as Promise<TradePlatform>;
  }
  override getDeployTransaction(
    _token: string,
    _roundTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, _roundTime, overrides || {});
  }
  override attach(address: string): TradePlatform {
    return super.attach(address) as TradePlatform;
  }
  override connect(signer: Signer): TradePlatform__factory {
    return super.connect(signer) as TradePlatform__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TradePlatformInterface {
    return new utils.Interface(_abi) as TradePlatformInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TradePlatform {
    return new Contract(address, _abi, signerOrProvider) as TradePlatform;
  }
}
